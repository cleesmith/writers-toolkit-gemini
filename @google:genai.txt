https://googleapis.github.io/js-genai/release_docs/index.html

@GOOGLE/GENAI 

GOOGLE GEN AI SDK FOR TYPESCRIPT AND JAVASCRIPT 

Documentation: https://googleapis.github.io/js-genai/ 

The Google Gen AI JavaScript SDK is designed for
TypeScript and JavaScript developers to build applications powered by Gemini. The SDK
supports both the Gemini Developer API AI 

The Google Gen AI SDK is designed to work with Gemini 2.0 features. 

SDK Preview: See: Preview Launch 

Caution 

API Key Security: Avoid exposing API keys in client-side code.
Use server-side implementations in production environments. 

PREREQUISITES 

- Node.js version 18 or later 

INSTALLATION 

To install the SDK, run the following command: 

npm install @google/genai  

QUICKSTART 

The simplest way to get started is to using an API key from Google AI Studio:

// import { GoogleGenAI } from '@google/genai';
// do NOT use import (ES), rather use CommonJS (require) instead:
const { GoogleGenAI, HarmCategory, HarmBlockThreshold } = require('@google/genai');

const GEMINI_API_KEY = process.env.GEMINI_API_KEY; 

const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY }); 

async function main() { 
	const response = await ai.models.generateContent({ 
		model: 'gemini-2.5-pro-preview-05-06' , 
		contents: 'Why is the sky blue?' , 
	}); 
	console.log(response.text); 
} 

main();  


INITIALIZATION 

The Google Gen AI SDK provides support for the Google AI Studio implementations of the Gemini API. 

GEMINI DEVELOPER API 

For server-side applications, initialize using an API key, 
which can be acquired from Google AI Studio: 

const ai = new GoogleGenAI({ apiKey: 'GEMINI_API_KEY' });

BROWSER 

Caution 

API Key Security: Avoid exposing API keys in client-side code.
Use server-side implementations in production environments. 

In the browser the initialization code is identical: 

const ai = new GoogleGenAI({ apiKey: 'GEMINI_API_KEY' });  
});  

GOOGLE GENAI OVERVIEW 

All API features are accessed through an instance of the GoogleGenAI classes.
The submodules bundle together related API methods: 

- ai.models :
Use models to query models(generateContent , generateImages , ...), or
examine their metadata. 

- ai.caches :
Create and manage caches to reduce costs when repeatedly using the same
large prompt prefix. 

- ai.chats :
Create local stateful chat objects to simplify multi turn interactions. 

- ai.files :
Upload files to the API and reference them in your prompts.
This reduces bandwidth if you use a file many times, and handles files too
large to fit inline with your prompt. 

- ai.live :
Start a live session for real time interaction, allows text + audio + video
input, and text or audio output. 

SAMPLES 

More samples can be found in the github samples directory 

STREAMING 

For quicker, more responsive API interactions use the generateContentStream method which yields chunks as they're generated: 

const GEMINI_API_KEY = process.env.GEMINI_API_KEY; 
const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY }); 

async function main() { 
	const response = await ai.models.generateContentStream({ 
		model: 'gemini-2.5-pro-preview-05-06' , 
		contents: 'Write a 10-word poem.' , 
	}); 
	for await(const chunk of response) { 
		console.log(chunk.text); 
	} 
} 

main();  

FUNCTION CALLING 

To let Gemini to interact with external systems, you can provide provide functionDeclaration objects as tools To use these tools it's a 4 step 

- Declare the function name, description, and parameters 

- Call generateContent with function calling enabled 

- Use the returned FunctionCall parameters to call your actual function 

- Send the result back to the model(with history, easier in ai.chat)
as a FunctionResponse 

// import { GoogleGenAI , FunctionCallingConfigMode , FunctionDeclaration , Type } from '@google/genai'; 
const GEMINI_API_KEY = process env.GEMINI_API_KEY; 

async function main() { 
const controlLightDeclaration : FunctionDeclaration = { 
name: 'controlLight' , 
parameters: { 
type: Type.OBJECT , 
description: 'Set the brightness and color temperature of a room light.' , 
properties: { 
brightness: { 
type: Type.NUMBER , 
description: 
'Light level from 0 to 100. Zero is off and 100 is full brightness.' , 
}, 
colorTemperature: { 
type: Type.STRING , 
description: 
'Color temperature of the light fixture which can be `daylight`, `cool`, or `warm`.' , 
}, 
}, 
required: [ 'brightness' , 'colorTemperature' ], 
}, 
}; 

const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY }); 
const response = await ai.models.generateContent({ 
model: 'gemini-2.5-pro-preview-05-06' , 
contents: 'Dim the lights so the room feels cozy and warm.' , 
config: { 
toolConfig: { 
functionCallingConfig: { 
// Force it to call any function 
mode: FunctionCallingConfigMode.ANY , 
allowedFunctionNames: [ 'controlLight' ], 
} 
}, 
tools: [{ functionDeclarations: [ controlLightDeclaration ]}] 
} 
}); 

console.log(response.functionCalls); 
} 

main();  

GENERATE CONTENT 

HOW TO STRUCTURE CONTENTS ARGUMENT FOR GENERATECONTENT 

The SDK allows you to specify the following types in the contents parameter: 

CONTENT 

- Content : The SDK will wrap the singular Content instance in an array which
contains only the given content instance 

- Content[] : No transformation happens 

PART 

Parts will be aggregated on a singular Content, with role 'user'. 

- Part | string : The SDK will wrap the string or Part in a Content instance with role 'user'. 

- Part[] | string[] : The SDK will wrap the full provided list into a single Content with role 'user'. 

NOTE: This doesn't apply to FunctionCall and FunctionResponse parts,
if you are specifying those, you need to explicitly provide the full Content[] structure making it explicit which Parts are 'spoken' by the model,
or the user. The SDK will throw an exception if you try this. 

PREVIEW LAUNCH 

The SDK is curently in a preview launch stage, per Google's launch stages this means: 

At Preview, products or features are ready for testing by customers. Preview offerings are often publicly announced, but are not necessarily feature-complete, and no SLAs or technical support commitments are provided for these. Unless stated otherwise by Google, Preview offerings are intended for use in test environments only. The average Preview stage lasts about six months. 

HOW IS THIS DIFFERENT FROM THE OTHER GOOGLE AI SDKS 

This SDK(@google/genai) is Google Deepmindâ€™s "vanilla" SDK for its generative AI offerings, and is where Google Deepmind adds new AI features. 

Other SDKs may be offering additional AI frameworks on top of this SDK, or may be targeting specific project environments(like Firebase). 

###


https://googleapis.github.io/js-genai/release_docs/classes/caches.Caches.html
- Caches 

CLASS CACHES 

HIERARCHY 

- BaseModule 

- Caches 

- Defined in caches.ts:16 

INDEX 

CONSTRUCTORS 

constructor 

METHODS 

create delete get list update 
CONSTRUCTORS 

CONSTRUCTOR 

- new Caches(apiClient : ApiClient) : Caches 

PARAMETERS 

- apiClient : ApiClient 

RETURNS CACHES 

Overrides BaseModule.constructor 

- Defined in caches.ts:17 

METHODS 

CREATE 

- create(params : CreateCachedContentParameters) : Promise < CachedContent > 

Creates a cached contents resource. 

PARAMETERS 

- params : CreateCachedContentParameters 

The parameters for the create request. 

RETURNS PROMISE < CACHEDCONTENT > 

The created cached content. 

REMARKS 

Context caching is only supported for specific models. See Gemini
Developer API reference for more information. 

EXAMPLE 

const contents = ...; // Initialize the content to cache. 
const response = await ai.caches.create({ 
model: 'gemini-2.5-pro-preview-05-06' , 
config: { 
'contents' : contents , 
'displayName' : 'test cache' , 
'systemInstruction' : 'What is the sum of the two pdfs?' , 
'ttl' : '86400s' , 
} 
});  

- Defined in caches.ts:72 

DELETE 

- delete(
params : DeleteCachedContentParameters , 
) : Promise < DeleteCachedContentResponse > 

Deletes cached content. 

PARAMETERS 

- params : DeleteCachedContentParameters 

The parameters for the delete request. 

RETURNS PROMISE < DELETECACHEDCONTENTRESPONSE > 

The empty response returned by the API. 

EXAMPLE 

await ai.caches.delete({ name: '...' }); // The server-generated resource name.  

- Defined in caches.ts:252 

GET 

- get(params : GetCachedContentParameters) : Promise < CachedContent > 

Gets cached content configurations. 

PARAMETERS 

- params : GetCachedContentParameters 

The parameters for the get request. 

RETURNS PROMISE < CACHEDCONTENT > 

The cached content. 

EXAMPLE 

await ai.caches.get({ name: '...' }); // The server-generated resource name.  

- Defined in caches.ts:162 

LIST 

- list(params ?: ListCachedContentsParameters) : Promise < Pager < CachedContent > > 

Lists cached content configurations. 

PARAMETERS 

- params : ListCachedContentsParameters = {} 

The parameters for the list request. 

RETURNS PROMISE < PAGER < CACHEDCONTENT > > 

The paginated results of the list of cached contents. 

EXAMPLE 

const cachedContents = await ai.caches.list({ config: { 'pageSize' : 2 }}); 
for(const cachedContent of cachedContents) { 
console.log(cachedContent); 
}  

- Defined in caches.ts:35 

UPDATE 

- update(params : UpdateCachedContentParameters) : Promise < CachedContent > 

Updates cached content configurations. 

PARAMETERS 

- params : UpdateCachedContentParameters 

The parameters for the update request. 

RETURNS PROMISE < CACHEDCONTENT > 

The updated cached content. 

EXAMPLE 

const response = await ai.caches.update({ 
name: '...' , // The server-generated resource name. 
config: { 'ttl' : '7600s' } 
});  

- Defined in caches.ts:341
###


https://googleapis.github.io/js-genai/release_docs/classes/client.GoogleGenAI.html
- client 

- GoogleGenAI 

CLASS GOOGLE GENAI 

The Google GenAI SDK. 


INDEX 

CONSTRUCTORS 

constructor 

PROPERTIES 

caches chats files live models operations
CONSTRUCTORS 

CONSTRUCTOR 

- new GoogleGenAI(options : GoogleGenAIOptions) : GoogleGenAI 

PARAMETERS 

- options : GoogleGenAIOptions 

RETURNS GOOGLEGENAI 

- Defined in client.ts:133 

PROPERTIES 

READONLY CACHES 

caches : Caches 

- Defined in client.ts:128 

READONLY CHATS 

chats : Chats 

- Defined in client.ts:127 

READONLY FILES 

files : Files 

- Defined in client.ts:129 

READONLY LIVE 

live : Live 

- Defined in client.ts:126 

READONLY MODELS 

models : Models 

- Defined in client.ts:125 

READONLY OPERATIONS 

operations : Operations 

- Defined in client.ts:130 

READONLY TUNINGS 

tunings : Tunings 

- Defined in client.ts:131 

- Defined in client.ts:123
###


https://googleapis.github.io/js-genai/release_docs/interfaces/client.GoogleGenAIOptions.html
- client 

- GoogleGenAIOptions 

INTERFACE GOOGLEGENAIOPTIONS 

Google Gen AI SDK's configuration options. 

See GoogleGenAI for usage samples. 

interface GoogleGenAIOptions { 
apiKey ?: string; 
apiVersion ?: string; 
googleAuthOptions ?: GoogleAuthOptions < JSONClient >; 
httpOptions ?: HttpOptions; 
location ?: string; 
project ?: string; 
} 

- Defined in client.ts:31 

INDEX 

PROPERTIES 

api Key? api Version? google Auth Options? http Options? location? project? 
PROPERTIES 

OPTIONAL API KEY 

apiKey ?: string 

The API Key, required for Gemini API clients. 

REMARKS 

Required on browser runtimes. 

- Defined in client.ts:65 

OPTIONAL API VERSION 

apiVersion ?: string 

Optional. The API version to use. 

REMARKS 

If unset, the default API version will be used. 

- Defined in client.ts:72 

OPTIONAL GOOGLE AUTH OPTIONS 

googleAuthOptions ?: GoogleAuthOptions < JSONClient > 

Optional. Authentication options defined by the by google-auth-library for AI clients. 

REMARKS 

SEE 

GoogleAuthOptions interface in google-auth-library-nodejs.

Only supported on Node runtimes, ignored on browser runtimes. 

- Defined in client.ts:82 

OPTIONAL HTTP OPTIONS 

httpOptions ?: HttpOptions 

Optional. A set of customizable configuration for HTTP requests. 

- Defined in client.ts:86 

OPTIONAL LOCATION 

location ?: string 

Optional. The Google Cloud project location for AI clients. 

REMARKS 

Only supported on Node runtimes, ignored on browser runtimes. 

- Defined in client.ts:58 

OPTIONAL PROJECT 

project ?: string 

Optional. The Google Cloud project ID for AI clients. 

Find your project ID: https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects 

REMARKS 

Only supported on Node runtimes, ignored on browser runtimes. 

- Defined in client.ts:50 
###


https://googleapis.github.io/js-genai/release_docs/interfaces/types.HttpOptions.html
- types 

- HttpOptions 

INTERFACE HTTPOPTIONS 

HTTP options to be used in each of the requests. 

interface HttpOptions { 
apiVersion ?: string; 
baseUrl ?: string; 
headers ?: Record < string , string >; 
timeout ?: number; 
} 

- Defined in types.ts:548 

INDEX 

PROPERTIES 

api Version? base Url? headers? timeout? 
PROPERTIES 

OPTIONAL API VERSION 

apiVersion ?: string 

Specifies the version of the API to use. 

- Defined in types.ts:552 

OPTIONAL BASE URL 

baseUrl ?: string 

The base URL for the AI platform service endpoint. 

- Defined in types.ts:550 

OPTIONAL HEADERS 

headers ?: Record < string , string > 

Additional HTTP headers to be sent with the request. 

- Defined in types.ts:554 

OPTIONAL TIMEOUT 

timeout ?: number 

Timeout for the request in milliseconds. 

- Defined in types.ts:556
###


https://googleapis.github.io/js-genai/release_docs/interfaces/client.GoogleGenAIOptions.html
- client 

- GoogleGenAIOptions 

INTERFACE GOOGLEGENAIOPTIONS 

Google Gen AI SDK's configuration options. 

See GoogleGenAI for usage samples. 

interface GoogleGenAIOptions { 
apiKey ?: string; 
apiVersion ?: string; 
googleAuthOptions ?: GoogleAuthOptions < JSONClient >; 
httpOptions ?: HttpOptions; 
location ?: string; 
project ?: string; 
} 

- Defined in client.ts:31 

INDEX 

PROPERTIES 

api Key? api Version? google Auth Options? http Options? location? project?
PROPERTIES 

OPTIONAL API KEY 

apiKey ?: string 

The API Key, required for Gemini API clients. 

REMARKS 

Required on browser runtimes. 

- Defined in client.ts:65 

OPTIONAL API VERSION 

apiVersion ?: string 

Optional. The API version to use. 

REMARKS 

If unset, the default API version will be used. 

- Defined in client.ts:72 

OPTIONAL GOOGLE AUTH OPTIONS 

googleAuthOptions ?: GoogleAuthOptions < JSONClient > 

Optional. Authentication options defined by the by google-auth-library for AI clients. 

REMARKS 

SEE 

GoogleAuthOptions interface in google-auth-library-nodejs.

Only supported on Node runtimes, ignored on browser runtimes. 

- Defined in client.ts:82 

OPTIONAL HTTP OPTIONS 

httpOptions ?: HttpOptions 

Optional. A set of customizable configuration for HTTP requests. 

- Defined in client.ts:86 

OPTIONAL LOCATION 

location ?: string 

Optional. The Google Cloud project location for AI clients. 

REMARKS 

Only supported on Node runtimes, ignored on browser runtimes. 

- Defined in client.ts:58 

OPTIONAL PROJECT 

project ?: string 

Optional. The Google Cloud project ID for AI clients. 

Find your project ID: https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects 

REMARKS 

Only supported on Node runtimes, ignored on browser runtimes. 

- Defined in client.ts:50 
###

https://googleapis.github.io/js-genai/release_docs/classes/files.Files.html
- Files 

CLASS FILES 

HIERARCHY 

- BaseModule 

- Files 

- Defined in files.ts:16 

INDEX 

CONSTRUCTORS 

constructor 

METHODS 

delete download get list upload 
CONSTRUCTORS 

CONSTRUCTOR 

- new Files(apiClient : ApiClient) : Files 

PARAMETERS 

- apiClient : ApiClient 

RETURNS FILES 

Overrides BaseModule.constructor 

- Defined in files.ts:17 

METHODS 

DELETE 

- delete(params : DeleteFileParameters) : Promise < DeleteFileResponse > 

Deletes a remotely stored file. 

PARAMETERS 

- params : DeleteFileParameters 

The parameters for the delete request. 

RETURNS PROMISE < DELETEFILERESPONSE > 

The DeleteFileResponse, the response for the delete method. 

EXAMPLE 

The following code deletes an example file named "files/mehozpxf877d". 

await ai.files.delete({ name: file.name });  

- Defined in files.ts:288 

DOWNLOAD 

- download(params : DownloadFileParameters) : Promise < void > 

Downloads a remotely stored file asynchronously to a location specified in
the params object. This method only works on Node environment, to
download files in the browser, use a browser compliant method like an tag. 

PARAMETERS 

- params : DownloadFileParameters 

The parameters for the download request. 

RETURNS PROMISE < VOID > 

EXAMPLE 

The following code downloads an example file named "files/mehozpxf877d" as
"file.txt". 

await ai.files.download({ file: file.name , downloadPath: 'file.txt' });  

- Defined in files.ts:124 

GET 

- get(params : GetFileParameters) : Promise < File > 

Retrieves the file information from the service. 

PARAMETERS 

- params : GetFileParameters 

The parameters for the get request 

RETURNS PROMISE < FILE > 

The Promise that resolves to the types.File object requested. 

EXAMPLE 

const config : GetFileParameters = { 
name: fileName , 
}; 
file = await ai.files.get(config); 
console.log(file.name);  

- Defined in files.ts:235 

LIST 

- list(params ?: ListFilesParameters) : Promise < Pager < File > > 

Lists all current project files from the service. 

PARAMETERS 

- params : ListFilesParameters = {} 

The parameters for the list request 

RETURNS PROMISE < PAGER < FILE > > 

The paginated results of the list of files 

EXAMPLE 

The following code prints the names of all files from the service, the
size of each page is 10. 

const listResponse = await ai.files.list({ config: { 'pageSize' : 10 }}); 
for await(const file of listResponse) { 
console.log(file.name); 
}  

- Defined in files.ts:38 

UPLOAD 

- upload(params : UploadFileParameters) : Promise < File > 

Uploads a file asynchronously to the Gemini API.
Supported upload sources: 

- Node.js: File path(string) or Blob object. 

- Browser: Blob object(e.g., File). 

PARAMETERS 

- params : UploadFileParameters 

Optional parameters specified in the types.UploadFileParameters interface. 

RETURNS PROMISE < FILE > 

A promise that resolves to a types.File object. 

REMARKS 

The mimeType can be specified in the config parameter. If omitted: 

- For file path(string) inputs, the mimeType will be inferred from the
file extension. 

- For Blob object inputs, the mimeType will be set to the Blob's type property.
Somex eamples for file extension to mimeType mapping:
.txt -> text/plain
.json -> application/json
.jpg -> image/jpeg
.png -> image/png
.mp3 -> audio/mpeg
.mp4 -> video/mp4 

This section can contain multiple paragraphs and code examples. 

SEE 

types.UploadFileParameters#config for the optional
config in the parameters. 

THROWS 

An error if called on a AI client. 

THROWS 

An error if the mimeType is not provided and can not be inferred,
the mimeType can be provided in the params.config parameter. 

THROWS 

An error occurs if a suitable upload location cannot be established. 

EXAMPLE 

The following code uploads a file to Gemini API. 

const file = await ai.files.upload({ file: 'file.txt' , config: { 
mimeType: 'text/plain' , 
}}); 
console.log(file.name);  

- Defined in files.ts:92
###

https://googleapis.github.io/js-genai/release_docs/classes/models.Models.html
- Models 

CLASS MODELS 

HIERARCHY 

- BaseModule 

- Models 

- Defined in models.ts:16 

INDEX 

CONSTRUCTORS 

constructor 

METHODS 

compute Tokens count Tokens delete embed Content generate Content generate Content Stream generate Images generate Videos get list update 
CONSTRUCTORS 

CONSTRUCTOR 

- new Models(apiClient : ApiClient) : Models 

PARAMETERS 

- apiClient : ApiClient 

RETURNS MODELS 

Overrides BaseModule.constructor 

- Defined in models.ts:17 

METHODS 

COMPUTE TOKENS 

- computeTokens(params : ComputeTokensParameters) : Promise < ComputeTokensResponse > 

Given a list of contents, returns a corresponding TokensInfo containing
the list of tokens and list of token ids. 

This method is not supported by the Gemini Developer API. 

PARAMETERS 

- params : ComputeTokensParameters 

The parameters for computing tokens. 

RETURNS PROMISE < COMPUTETOKENSRESPONSE > 

The response from the API. 

EXAMPLE 

const response = await ai.models.computeTokens({ 
model: 'gemini-2.5-pro-preview-05-06' , 
contents: 'What is your name?' 
}); 
console.log(response);  

- Defined in models.ts:1015 

COUNT TOKENS 

- countTokens(params : CountTokensParameters) : Promise < CountTokensResponse > 

Counts the number of tokens in the given contents. Multimodal input is
supported for Gemini models. 

PARAMETERS 

- params : CountTokensParameters 

The parameters for counting tokens. 

RETURNS PROMISE < COUNTTOKENSRESPONSE > 

The response from the API. 

EXAMPLE 

const response = await ai.models.countTokens({ 
model: 'gemini-2.5-pro-preview-05-06' , 
contents: 'The quick brown fox jumps over the lazy dog.' 
}); 
console.log(response);

- Defined in models.ts:916 

DELETE 

- delete(params : DeleteModelParameters) : Promise < DeleteModelResponse > 

Deletes a tuned model by its name. 

PARAMETERS 

- params : DeleteModelParameters 

The parameters for deleting the model. 

RETURNS PROMISE < DELETEMODELRESPONSE > 

The response from the API. 

EXAMPLE 

const response = await ai.models.delete({ model: 'tuned-model-name' });  

- Defined in models.ts:825 

EMBED CONTENT 

- embedContent(params : EmbedContentParameters) : Promise < EmbedContentResponse > 

Calculates embeddings for the given contents. Only text is supported. 

PARAMETERS 

- params : EmbedContentParameters 

The parameters for embedding contents. 

RETURNS PROMISE < EMBEDCONTENTRESPONSE > 

The response from the API. 

EXAMPLE 

const response = await ai.models.embedContent({ 
model: 'text-embedding-004' , 
contents: [ 
'What is your name?' , 
'What is your favorite color?' , 
], 
config: { 
outputDimensionality: 64 , 
}, 
}); 
console.log(response);  

- Defined in models.ts:388 

GENERATE CONTENT 

- generateContent(
params : GenerateContentParameters , 
) : Promise < GenerateContentResponse > 

Makes an API request to generate content with a given model. 

For the model parameter, supported formats for AI API include: 

- The Gemini model ID, for example: 'gemini-2.5-pro-preview-05-06' 

- The full resource name starts with 'projects/', for example:
'projects/my-project-id/locations/us-central1/publishers/google/models/gemini-2.5-pro-preview-05-06' 

- The partial resource name with 'publishers/', for example:
'publishers/google/models/gemini-2.5-pro-preview-05-06'

- / separated publisher and model name, for example:
'google/gemini-2.5-pro-preview-05-06'

For the model parameter, supported formats for Gemini API include: 

- The Gemini model ID, for example: 'gemini-2.5-pro-preview-05-06' 

- The model name starts with 'models/', for example:
'models/gemini-2.5-pro-preview-05-06' 

- For tuned models, the model name starts with 'tunedModels/',
for example:
'tunedModels/1234567890123456789' 

Some models support multimodal input and output. 

PARAMETERS 

- params : GenerateContentParameters 

The parameters for generating content. 

RETURNS PROMISE < GENERATECONTENTRESPONSE > 

The response from generating content. 

EXAMPLE 

const response = await ai.models.generateContent({ 
model: 'gemini-2.5-pro-preview-05-06' , 
contents: 'why is the sky blue?' , 
config: { 
candidateCount: 2 , 
} 
}); 
console.log(response);  

- Defined in models.ts:59 

GENERATE CONTENT STREAM 

- generateContentStream(
params : GenerateContentParameters , 
) : Promise < AsyncGenerator < GenerateContentResponse , any , unknown > > 

Makes an API request to generate content with a given model and yields the
response in chunks. 

For the model parameter, supported formats for AI API include: 

- The Gemini model ID, for example: 'gemini-2.5-pro-preview-05-06' 

- The full resource name starts with 'projects/', for example:
'projects/my-project-id/locations/us-central1/publishers/google/models/gemini-2.5-pro-preview-05-06' 

- The partial resource name with 'publishers/', for example:
'publishers/google/models/gemini-2.5-pro-preview-05-06'

- / separated publisher and model name, for example:
'google/gemini-2.5-pro-preview-05-06'

For the model parameter, supported formats for Gemini API include: 

- The Gemini model ID, for example: 'gemini-2.5-pro-preview-05-06' 

- The model name starts with 'models/', for example:
'models/gemini-2.5-pro-preview-05-06' 

- For tuned models, the model name starts with 'tunedModels/',
for example:
'tunedModels/1234567890123456789' 

Some models support multimodal input and output. 

PARAMETERS 

- params : GenerateContentParameters 

The parameters for generating content with streaming response. 

RETURNS PROMISE < ASYNCGENERATOR < GENERATECONTENTRESPONSE , ANY , UNKNOWN > > 

The response from generating content. 

EXAMPLE 

const response = await ai.models.generateContentStream({ 
model: 'gemini-2.5-pro-preview-05-06' , 
contents: 'why is the sky blue?' , 
config: { 
maxOutputTokens: 200 , 
} 
}); 
for await(const chunk of response) { 
console.log(chunk); 
}  

- Defined in models.ts:106 

GENERATE IMAGES 

- generateImages(
params : GenerateImagesParameters , 
) : Promise < GenerateImagesResponse > 

Generates an image based on a text description and configuration. 

PARAMETERS 

- params : GenerateImagesParameters 

RETURNS PROMISE < GENERATEIMAGESRESPONSE > 

The response from the API. 

EXAMPLE 

const response = await client.models.generateImages({ 
model: 'imagen-3.0-generate-002' , 
prompt: 'Robot holding a red skateboard' , 
config: { 
numberOfImages: 1 , 
includeRaiReason: true , 
}, 
}); 
console.log(response ?. generatedImages ?.[ 0 ]?. image ?. imageBytes);  

- Defined in models.ts:133 

GENERATE VIDEOS 

- generateVideos(
params : GenerateVideosParameters , 
) : Promise < GenerateVideosOperation > 

Generates videos based on a text description and configuration. 

PARAMETERS 

- params : GenerateVideosParameters 

The parameters for generating videos. 

RETURNS PROMISE < GENERATEVIDEOSOPERATION > 

A Promise which allows you to track the progress and eventually retrieve the generated videos using the operations.get method. 

EXAMPLE 

const operation = await ai.models.generateVideos({ 
model: 'veo-2.0-generate-001' , 
prompt: 'A neon hologram of a cat driving at top speed' , 
config: { 
numberOfVideos: 1 
}); 

while(! operation.done) { 
await new Promise(resolve => setTimeout(resolve , 10000)); 
operation = await ai.operations.getVideosOperation({ operation: operation }); 
} 

console.log(operation.response ?. generatedVideos ?.[ 0 ]?. video ?. uri);  

- Defined in models.ts:1086 

GET 

- get(params : GetModelParameters) : Promise < Model > 

Fetches information about a model by name. 

PARAMETERS 

- params : GetModelParameters 

RETURNS PROMISE < MODEL > 

EXAMPLE 

const modelInfo = await ai.models.get({ model: 'gemini-2.5-pro-preview-05-06' });  

- Defined in models.ts:577 

LIST 

- list(params ?: ListModelsParameters) : Promise < Pager < Model > > 

PARAMETERS 

- Optional params : ListModelsParameters 

RETURNS PROMISE < PAGER < MODEL > > 

- Defined in models.ts:169 

UPDATE 

- update(params : UpdateModelParameters) : Promise < Model > 

Updates a tuned model by its name. 

PARAMETERS 

- params : UpdateModelParameters 

The parameters for updating the model. 

RETURNS PROMISE < MODEL > 

The response from the API. 

EXAMPLE 

const response = await ai.models.update({ 
model: 'tuned-model-name' , 
config: { 
displayName: 'New display name' , 
description: 'New description' , 
}, 
});  

- Defined in models.ts:743
###

https://googleapis.github.io/js-genai/release_docs/modules/schema_helper.html
- schema_helper 

MODULE SCHEMA_HELPER 

INTERFACES 

JSONSchema 

ZodFunction 

TYPE ALIASES 

JSONSchemaType 

FUNCTIONS 

functionDeclarationFromZodFunction 

schemaFromZodType
###

https://googleapis.github.io/js-genai/release_docs/interfaces/schema_helper.JSONSchema.html
- schema_helper 

- JSONSchema 

INTERFACE JSONSCHEMA 

A subset of JSON Schema according to 2020-12 JSON Schema draft. 

Represents a subset of a JSON Schema object that can be used by Gemini API.
The difference between this interface and the Schema interface is that this
interface is compatible with OpenAPI 3.1 schema objects while the
types.Schema interface 

SEE 

Schema is used to make API call to
Gemini API. 

interface JSONSchema { 
anyOf ?: JSONSchema []; 
default ?: unknown; 
description ?: string; 
enum ?: unknown []; 
format ?: string; 
items ?: JSONSchema; 
maximum ?: number; 
maxItems ?: string; 
maxLength ?: string; 
maxProperties ?: string; 
minimum ?: number; 
minItems ?: string; 
minLength ?: string; 
minProperties ?: string; 
pattern ?: string; 
properties ?: Record < string , JSONSchema >; 
required ?: string []; 
title ?: string; 
type ?: JSONSchemaType | JSONSchemaType []; 
} 

- Defined in schema_helper.ts:39 

INDEX 

PROPERTIES 

any Of? default? description? enum? format? items? maximum? max Items? max Length? max Properties? minimum? min Items? min Length? min Properties? pattern? properties? required? title? type? 
PROPERTIES 

OPTIONAL ANY OF 

anyOf ?: JSONSchema [] 

Used for Union types and Intersection types. This keyword is used to define
the schema of the possible values. 

- Defined in schema_helper.ts:149 

OPTIONAL DEFAULT 

default ?: unknown 

This keyword can be used to supply a default JSON value associated
with a particular schema. The value should be valid according to the
schema. This is not supported for Gemini API. 

- Defined in schema_helper.ts:70 

OPTIONAL DESCRIPTION 

description ?: string 

An explanation about the purpose of the instance described by the
schema. 

- Defined in schema_helper.ts:63 

OPTIONAL ENUM 

enum ?: unknown [] 

Used for specify the possible values for an enum. 

- Defined in schema_helper.ts:91 

OPTIONAL FORMAT 

format ?: string 

Defines semantic information about a string instance(e.g., "date-time",
"email"). 

- Defined in schema_helper.ts:51 

OPTIONAL ITEMS 

items ?: JSONSchema 

Used for arrays. This keyword is used to define the schema of the elements
in the array. 

- Defined in schema_helper.ts:76 

OPTIONAL MAXIMUM 

maximum ?: number 

Used for numbers. specify the maximum value for a number. 

- Defined in schema_helper.ts:125 

OPTIONAL MAX ITEMS 

maxItems ?: string 

Key word for arrays. Specify the maximum number of elements in the array.e 

- Defined in schema_helper.ts:86 

OPTIONAL MAX LENGTH 

maxLength ?: string 

Used for strings. The keyword to specify the maximum length of the
string. 

- Defined in schema_helper.ts:137 

OPTIONAL MAX PROPERTIES 

maxProperties ?: string 

The key word for objects. Specify the maximum number of properties in the
object. 

- Defined in schema_helper.ts:115 

OPTIONAL MINIMUM 

minimum ?: number 

Used for numbers. Specify the minimum value for a number. 

- Defined in schema_helper.ts:120 

OPTIONAL MIN ITEMS 

minItems ?: string 

Key word for arrays. Specify the minimum number of elements in the array. 

- Defined in schema_helper.ts:81 

OPTIONAL MIN LENGTH 

minLength ?: string 

Used for strings. The keyword to specify the minimum length of the
string. 

- Defined in schema_helper.ts:131 

OPTIONAL MIN PROPERTIES 

minProperties ?: string 

The key word for objects. Specify the minimum number of properties in the
object. 

- Defined in schema_helper.ts:109 

OPTIONAL PATTERN 

pattern ?: string 

Used for strings. Key word to specify a regular
expression(ECMA-262) matches the instance successfully. 

- Defined in schema_helper.ts:143 

OPTIONAL PROPERTIES 

properties ?: Record < string , JSONSchema > 

Used for objects. This keyword is used to define the schema of the
properties in the object. 

- Defined in schema_helper.ts:97 

OPTIONAL REQUIRED 

required ?: string [] 

Used for objects. This keyword is used to specify the properties of the
object that are required to be present in the instance. 

- Defined in schema_helper.ts:103 

OPTIONAL TITLE 

title ?: string 

A preferably short description about the purpose of the instance
described by the schema. This is not supported for Gemini API. 

- Defined in schema_helper.ts:57 

OPTIONAL TYPE 

type ?: JSONSchemaType | JSONSchemaType [] 

Validation succeeds if the type of the instance matches the type
represented by the given type, or matches at least one of the given types
in the array. 

- Defined in schema_helper.ts:45
###

https://googleapis.github.io/js-genai/release_docs/interfaces/schema_helper.ZodFunction.html
- schema_helper 

- ZodFunction 

INTERFACE ZODFUNCTION 

Object for passing the details of the zod function schema.
This is to set up the named parameters for the functionDeclarationFromZod
function. 

interface ZodFunction { 
name : string; 
zodFunctionSchema : ZodFunction < ZodTuple < any , ZodTypeAny > , ZodTypeAny >; 
} 

- Defined in schema_helper.ts:436 

INDEX 

PROPERTIES 

name zod Function Schema 
PROPERTIES 

NAME 

name : string 

- Defined in schema_helper.ts:438 

ZOD FUNCTION SCHEMA 

zodFunctionSchema : ZodFunction < ZodTuple < any , ZodTypeAny > , ZodTypeAny > 

- Defined in schema_helper.ts:441
###

https://googleapis.github.io/js-genai/release_docs/types/schema_helper.JSONSchemaType.html
- schema_helper 

- JSONSchemaType 

TYPE ALIAS JSONSCHEMATYPE 

JSONSchemaType : 
| "string" 
| "number" 
| "integer" 
| "object" 
| "array" 
| "boolean" 
| "null" 

Represents the possible JSON schema types. 

- Defined in schema_helper.ts:21
###

https://googleapis.github.io/js-genai/release_docs/functions/schema_helper.functionDeclarationFromZodFunction.html
- schema_helper 

- functionDeclarationFromZodFunction 

FUNCTION FUNCTIONDECLARATIONFROMZODFUNCTION 

- functionDeclarationFromZodFunction(
zodFunction : ZodFunction , 
) : FunctionDeclaration 

Converts a Zod function schema definition into a FunctionDeclaration object. 

[Experimental] This function help to convert the zod function to the function
declaration format. Currently, the function only support the function with
one parameter value, the parameter can be object or void. 

PARAMETERS 

- zodFunction : ZodFunction 

The zodFunction object for passing the name and zod
function
schema. see ZodFunction for more details. 

RETURNS FUNCTIONDECLARATION 

The resulting FunctionDeclaration object. 

SEE 

- FunctionDeclaration 

- Schema 

THROWS 

If the input zodFunction contains paramters that can not
be converteed to Schema object 

THROWS 

If the input zodFunction contains more than one parameter
or the parameter is not object. 

- Defined in schema_helper.ts:460
###

https://googleapis.github.io/js-genai/release_docs/functions/schema_helper.schemaFromZodType.html
- schema_helper 

- schemaFromZodType 

FUNCTION SCHEMAFROMZODTYPE 

- schemaFromZodType(zodSchema : ZodType) : Schema 

Converts a Zod object into the Gemini schema format. 

[Experimental] This function first validates the structure of the input zodSchema object against an internal representation of JSON Schema(see JSONSchema).
Any mismatch in data types and inrecongnized properties will cause an error. 

PARAMETERS 

- zodSchema : ZodType 

The Zod schema object to convert. Its structure is validated
against the JSONSchema interface before conversion to JSONSchema
schema. 

RETURNS SCHEMA 

The resulting Schema object. 

SEE 

- Schema 

- JSONSchema The interface used to validate the input zodSchema.

THROWS 

If the input zodSchema does not conform to the expected
JSONSchema structure during the initial validation step. 

- Defined in schema_helper.ts:232
###

https://googleapis.github.io/js-genai/release_docs/modules/types.html
- types 

MODULE TYPES 

ENUMERATIONS 

ActivityHandling 

AdapterSize 

AuthType 

BlockedReason 

ControlReferenceType 

DynamicRetrievalConfigMode 

EndSensitivity 

FeatureSelectionPreference 

FileSource 

FileState 

FinishReason 

FunctionCallingConfigMode 

HarmBlockMethod 

HarmBlockThreshold 

HarmCategory 

HarmProbability 

HarmSeverity 

ImagePromptLanguage 

JobState 

Language 

MaskReferenceMode 

MediaModality 

MediaResolution 

Modality 

Mode 

Outcome 

PersonGeneration 

SafetyFilterLevel 

StartSensitivity 

SubjectReferenceType 

TrafficType 

TurnCoverage 

Type 

CLASSES 

ComputeTokensResponse 

CountTokensResponse 

CreateFileResponse 

DeleteCachedContentResponse 

DeleteFileResponse 

DeleteModelResponse 

EmbedContentResponse 

FunctionResponse 

GenerateContentResponse 

GenerateContentResponsePromptFeedback 

GenerateContentResponseUsageMetadata 

GenerateImagesResponse 

GenerateVideosResponse 

HttpResponse 

ListCachedContentsResponse 

ListFilesResponse 

ListModelsResponse 

ListTuningJobsResponse 

LiveClientToolResponse 

LiveSendToolResponseParameters 

LiveServerMessage 

ReplayResponse 

INTERFACES 

ActivityEnd 

ActivityStart 

ApiKeyConfig 

AudioTranscriptionConfig 

AuthConfig 

AuthConfigGoogleServiceAccountConfig 

AuthConfigHttpBasicAuthConfig 

AuthConfigOauthConfig 

AuthConfigOidcConfig 

AutomaticActivityDetection 

Blob 

CachedContent 

CachedContentUsageMetadata 

Candidate 

Citation 

CitationMetadata 

CodeExecutionResult 

ComputeTokensConfig 

ComputeTokensParameters 

Content 

ContentEmbedding 

ContentEmbeddingStatistics 

ContextWindowCompressionConfig 

ControlReferenceConfig 

ControlReferenceImage 

CountTokensConfig 

CountTokensParameters 

CreateCachedContentConfig 

CreateCachedContentParameters 

CreateChatParameters 

CreateFileConfig 

CreateFileParameters 

CreateTuningJobConfig 

CreateTuningJobParameters 

DatasetDistribution 

DatasetDistributionDistributionBucket 

DatasetStats 

DeleteCachedContentConfig 

DeleteCachedContentParameters 

DeleteFileConfig 

DeleteFileParameters 

DeleteModelConfig 

DeleteModelParameters 

DistillationDataStats 

DistillationHyperParameters 

DistillationSpec 

DownloadFileConfig 

DownloadFileParameters 

DynamicRetrievalConfig 

EmbedContentConfig 

EmbedContentMetadata 

EmbedContentParameters 

EncryptionSpec 

Endpoint 

EnterpriseWebSearch 

ExecutableCode 

FetchPredictOperationConfig 

FetchPredictOperationParameters 

File 

FileData 

FileStatus 

FunctionCall 

FunctionCallingConfig 

FunctionDeclaration 

GenerateContentConfig 

GenerateContentParameters 

GeneratedImage 

GeneratedVideo 

GenerateImagesConfig 

GenerateImagesParameters 

GenerateVideosConfig 

GenerateVideosOperation 

GenerateVideosParameters 

GenerationConfig 

GenerationConfigRoutingConfig 

GenerationConfigRoutingConfigAutoRoutingMode 

GenerationConfigRoutingConfigManualRoutingMode 

GetCachedContentConfig 

GetCachedContentParameters 

GetFileConfig 

GetFileParameters 

GetModelConfig 

GetModelParameters 

GetOperationConfig 

GetOperationParameters 

GetTuningJobConfig 

GetTuningJobParameters 

GoogleMaps 

GoogleRpcStatus 

GoogleSearch 

GoogleSearchRetrieval 

GoogleTypeDate 

GroundingChunk 

GroundingChunkRetrievedContext 

GroundingChunkWeb 

GroundingMetadata 

GroundingSupport 

HttpOptions 

Image 

LatLng 

ListCachedContentsConfig 

ListCachedContentsParameters 

ListFilesConfig 

ListFilesParameters 

ListModelsConfig 

ListModelsParameters 

ListTuningJobsConfig 

ListTuningJobsParameters 

LiveCallbacks 

LiveClientContent 

LiveClientMessage 

LiveClientRealtimeInput 

LiveClientSetup 

LiveConnectConfig 

LiveConnectParameters 

LiveSendClientContentParameters 

LiveSendRealtimeInputParameters 

LiveServerContent 

LiveServerGoAway 

LiveServerSessionResumptionUpdate 

LiveServerSetupComplete 

LiveServerToolCall 

LiveServerToolCallCancellation 

LogprobsResult 

LogprobsResultCandidate 

LogprobsResultTopCandidates 

MaskReferenceConfig 

MaskReferenceImage 

ModalityTokenCount 

Model 

ModelSelectionConfig 

Operation 

OperationGetParameters 

Part 

PartnerModelTuningSpec 

PrebuiltVoiceConfig 

RagRetrievalConfig 

RagRetrievalConfigFilter 

RagRetrievalConfigHybridSearch 

RagRetrievalConfigRanking 

RagRetrievalConfigRankingLlmRanker 

RagRetrievalConfigRankingRankService 

RawReferenceImage 

RealtimeInputConfig 

ReplayFile 

ReplayInteraction 

ReplayRequest 

Retrieval 

RetrievalConfig 

RetrievalMetadata 

SafetyAttributes 

SafetyRating 

SafetySetting 

Schema 

SearchEntryPoint 

Segment 

SendMessageParameters 

SessionResumptionConfig 

SlidingWindow 

SpeechConfig 

StyleReferenceConfig 

StyleReferenceImage 

SubjectReferenceConfig 

SubjectReferenceImage 

SupervisedHyperParameters 

SupervisedTuningDatasetDistribution 

SupervisedTuningDatasetDistributionDatasetBucket 

SupervisedTuningDataStats 

SupervisedTuningSpec 

TestTableFile 

TestTableItem 

ThinkingConfig 

TokensInfo 

Tool 

ToolCodeExecution 

ToolConfig 

Transcription 

TunedModel 

TunedModelInfo 

TuningDataset 

TuningDataStats 

TuningExample 

TuningJob 

TuningValidationDataset 

UpdateCachedContentConfig 

UpdateCachedContentParameters 

UpdateModelConfig 

UpdateModelParameters 

UploadFileConfig 

UploadFileParameters 

UpscaleImageConfig 

UpscaleImageParameters 

UsageMetadata 

Video 

VideoMetadata 

VoiceConfig 

TYPE ALIASES 

BlobImageUnion 

ContentListUnion 

ContentUnion 

DownloadableFileUnion 

PartListUnion 

PartUnion 

SchemaUnion 

SpeechConfigUnion 

ToolListUnion 

FUNCTIONS 

createModelContent 

createPartFromBase64 

createPartFromCodeExecutionResult 

createPartFromExecutableCode 

createPartFromFunctionCall 

createPartFromFunctionResponse 

createPartFromText 

createPartFromUri 

createUserContent
###

